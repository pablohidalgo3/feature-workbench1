---
import Layout from "../../layouts/Layout.astro";
import { API_URL, API_KEY } from "astro:env/server";

// Definir el orden de las posiciones
const positionOrder: Record<string, number> = {
  Top: 1,
  Jungler: 2,
  Mid: 3,
  Adc: 4,
  Support: 5,
};

// Obtener el parámetro del año seleccionado de la URL
const { id } = Astro.params;
const selectedYear = id || "2016.1"; // Si no hay un año, usa 2016.1 como predeterminado

let players = [];
let years: any[] = [];

const [playersResponse, yearsResponse] = await Promise.all([
  fetch(`${API_URL}/players/year/${selectedYear}`, {
    headers: {
      Authorization: `Bearer ${API_KEY}`,
    },
  }),
  fetch(`${API_URL}/years`, {
    headers: {
      Authorization: `Bearer ${API_KEY}`,
    },
  }),
]);

players = await playersResponse.json();
years = await yearsResponse.json();

// Ordenar los jugadores por posición
players.sort(
  (a: { position: string | number }, b: { position: string | number }) => {
    const positionA = positionOrder[a.position] || 999;
    const positionB = positionOrder[b.position] || 999;
    return positionA - positionB;
  }
);

// Función para obtener etiquetas legibles para los años
function getYearLabel(year: never) {
  const yearObj = years.find((y) => y.year_identifier === year);
  return yearObj ? yearObj.label : year;
}
// Exportar las rutas dinámicas basadas en los años disponibles
export async function getStaticPaths() {
  const response = await fetch(`${API_URL}/players/year`, {
    headers: {
      Authorization: `Bearer ${API_KEY}`,
    },
  });

  const yearsData = await response.json();

  return yearsData.map((year: { year_identifier: any }) => ({
    params: { this: year.year_identifier },
  }));
}
---

<Layout
  title="G2 League Playerbase"
  description="Consulta la base de jugadores de G2 Esports en League of Legends por año."
  image="/g2_logo.png"
  url=`https://www.g2leaguehub.com/year/${selectedYear}`
>
  <main class="flex flex-col items-center">
    <section aria-label="Jugadores de G2 Esports">
      <h1 class="text-3xl font-bold text-center mb-10">
        {getYearLabel(selectedYear)} roster
      </h1>

      <!-- Selector de año para móviles -->
      <div class="sm:hidden mb-6 flex justify-center">
        <select
          id="yearSelector"
          class="bg-gray-700 text-white border border-gray-600 rounded-full px-4 py-2 w-64 text-center appearance-none bg-no-repeat bg-right-center"
        >
          {
            years.map(
              (year: {
                year_identifier: string | number | string[] | null | undefined;
                label: unknown;
              }) => (
                <option
                  value={year.year_identifier}
                  selected={year.year_identifier === selectedYear}
                >
                  {year.label}
                </option>
              )
            )
          }
        </select>
      </div>

      <!-- Para pantallas móviles (sm:hidden) -->
      <div class="px-4 sm:hidden mx-auto max-w-screen-xl">
        <div class="grid gap-6 md:grid-cols-3">
          {
            players.map(
              (player: {
                id: any;
                nickname: any;
                name: any;
                position: any;
                img: any;
              }) => {
                const { id, nickname, name, position, img } = player;
                return (
                  <article class="flex">
                    <a
                      href={`/player/${id}`}
                      class="mb-2 xl:mb-0 transition hover:scale-110"
                      aria-label={`Perfil de ${player.nickname}`}
                    >
                      <img
                        transition:name={`img-${nickname}`}
                        class="mr-5 w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 rounded-full mb-2 object-cover object-top"
                        loading="lazy"
                        decoding="async"
                        src={img}
                        alt={name}
                      />
                    </a>

                    <div class="flex flex-col justify-center">
                      <span
                        transition:name={`nickname-${nickname}`}
                        class="mb-2 text-4xl font-bold leading-tight text-white"
                      >
                        {nickname}
                      </span>
                      <span
                        transition:name={`name-${nickname}`}
                        class="mb-2 text-2xl font-bold leading-tight text-white"
                      >
                        {name}
                      </span>

                      <p class="mb-4 text-gray-300 max-w-sm">{position}</p>
                    </div>
                  </article>
                );
              }
            )
          }
        </div>
      </div>

      <!-- Para pantallas mayores que móviles (sm:block y superiores) -->
      <div class="px-4 hidden sm:block mx-auto max-w-screen-xl">
        <!-- Primera fila con 3 jugadores -->
        <div class="grid gap-6 grid-cols-3">
          {
            players
              .slice(0, 3)
              .map(
                (player: {
                  id: any;
                  nickname: any;
                  name: any;
                  position: any;
                  img: any;
                }) => {
                  const { id, nickname, name, position, img } = player;
                  return (
                    <article class="flex">
                      <a
                        href={`/player/${id}`}
                        class="mb-2 xl:mb-0 transition hover:scale-110"
                        aria-label={`Perfil de ${player.nickname}`}
                      >
                        <img
                          transition:name={`img-${nickname}`}
                          class="mr-5 w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 rounded-full mb-2 object-cover object-top"
                          loading="lazy"
                          decoding="async"
                          src={img}
                          alt={name}
                        />
                      </a>

                      <div class="flex flex-col justify-center">
                        <span
                          transition:name={`nickname-${nickname}`}
                          class="mb-2 text-4xl font-bold leading-tight text-white"
                        >
                          {nickname}
                        </span>
                        <span
                          transition:name={`name-${nickname}`}
                          class="mb-2 text-2xl font-bold leading-tight text-white"
                        >
                          {name}
                        </span>

                        <p class="mb-4 text-gray-300 max-w-sm">{position}</p>
                      </div>
                    </article>
                  );
                }
              )
          }
        </div>

        <!-- Segunda fila con 2 jugadores -->
        <div class="flex gap-6 mt-8 justify-center">
          {
            players
              .slice(3, 5)
              .map(
                (player: {
                  id: any;
                  nickname: any;
                  name: any;
                  position: any;
                  img: any;
                }) => {
                  const { id, nickname, name, position, img } = player;
                  return (
                    <article class="flex">
                      <a
                        href={`/player/${id}`}
                        class="mb-2 xl:mb-0 transition hover:scale-110"
                        aria-label={`Perfil de ${player.nickname}`}
                      >
                        <img
                          transition:name={`img-${nickname}`}
                          class="mr-5 w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 rounded-full mb-2 object-cover object-top"
                          loading="lazy"
                          decoding="async"
                          src={img}
                          alt={name}
                        />
                      </a>

                      <div class="flex flex-col justify-center">
                        <span
                          transition:name={`nickname-${nickname}`}
                          class="mb-2 text-4xl font-bold leading-tight text-white"
                        >
                          {nickname}
                        </span>
                        <span
                          transition:name={`name-${nickname}`}
                          class="mb-2 text-2xl font-bold leading-tight text-white"
                        >
                          {name}
                        </span>

                        <p class="mb-4 text-gray-300 max-w-sm">{position}</p>
                      </div>
                    </article>
                  );
                }
              )
          }
        </div>

        <!-- Barra de años para pantallas grandes -->
        <div class="timeline overflow-x-auto mt-10 px-4 md:px-8">
          <div class="relative">
            <!-- Línea continua detrás de todos los puntos -->
            <div class="absolute top-[11px] left-0 right-0 h-0.5 bg-gray-300">
            </div>

            <!-- Elemento animado -->
            <div
              id="animatedLine"
              class="absolute top-[11px] h-0.5 bg-yellow-500 transition-all duration-300 ease-in-out"
            >
            </div>

            <ol
              id="timelineList"
              class="flex justify-between w-full relative m-0 p-0"
            >
              {
                years.map((year) => (
                  <li class="relative text-center flex-grow flex-basis-0 px-2">
                    <a
                      href={`/year/${year.year_identifier}`}
                      class={`block transition-all duration-300 ${
                        year.year_identifier === selectedYear
                          ? "text-yellow-500 font-bold"
                          : "text-gray-500"
                      }`}
                      data-year={year.year_identifier}
                      aria-label={`Año ${year.label}`}
                    >
                      <div class="h-6 flex items-center justify-center relative">
                        <div
                          class={`absolute top-1/2 -translate-y-1/2 rounded-full transition-all duration-300 z-10
                        ${year.year_identifier === selectedYear ? "bg-yellow-500 w-6 h-6" : "bg-gray-300 w-4 h-4"}`}
                        />
                      </div>
                      <span class="text-sm transition-all duration-300 block mt-2">
                        {year.label}
                      </span>
                    </a>
                  </li>
                ))
              }
            </ol>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    const yearSelector = document.getElementById("yearSelector");
    if (yearSelector) {
      yearSelector.addEventListener("change", (event) => {
        const selectedYear = (event.target as HTMLSelectElement).value;
        navigate(`/year/${selectedYear}`);
      });
    }
  });
</script>
